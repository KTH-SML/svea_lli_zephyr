name: Build and Publish Firmware

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zephyrproject-rtos/ci:v0.26.2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set workspace variable
        run: |
          echo "WORKSPACE=${GITHUB_WORKSPACE:-/workspace}" >> $GITHUB_ENV

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "WORKSPACE: $WORKSPACE"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "PWD: $(pwd)"
          echo "=== Zephyr SDK Search ==="
          find /opt -name "*zephyr*" -type d 2>/dev/null || echo "No zephyr directories in /opt"
          ls -la /opt/toolchains/ 2>/dev/null || echo "No /opt/toolchains directory"
          echo "=== Environment Variables ==="
          env | grep -i zephyr || echo "No ZEPHYR env vars"
          echo "=== Which west ==="
          which west || echo "west not found"
          west --version || echo "west version failed"

      - name: Initialize west workspace
        run: |
          if [ ! -d .west ]; then
            west init -l west-manifest
          fi
          west update

      - name: Install micro-ROS dependencies
        run: |
          pip3 install --break-system-packages \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2 || \
          pip3 install --user \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2

      - name: Clean build directory
        run: |
          rm -rf $WORKSPACE/Projects/svea-lli/build
          rm -rf $WORKSPACE/modules/lib/micro_ros_zephyr_module/modules/libmicroros/micro_ros_*
          rm -rf $WORKSPACE/build

      - name: Setup Zephyr SDK
        run: |
          # Auto-detect SDK installation
          SDK_ROOT=$(find /opt -name "zephyr-sdk-*" -type d 2>/dev/null | head -1)
          if [ -z "$SDK_ROOT" ]; then
            echo "ERROR: No Zephyr SDK found in /opt"
            exit 1
          fi

          echo "Found Zephyr SDK at: $SDK_ROOT"
          echo "ZEPHYR_SDK_INSTALL_DIR=$SDK_ROOT" >> $GITHUB_ENV

          # Check for CMake config
          CMAKE_CONFIG="$SDK_ROOT/cmake/zephyr"
          if [ -d "$CMAKE_CONFIG" ]; then
            echo "ZEPHYR_SDK_CMAKE_DIR=$CMAKE_CONFIG" >> $GITHUB_ENV
            echo "Found CMake config at: $CMAKE_CONFIG"
          else
            echo "WARNING: No CMake config found at $CMAKE_CONFIG"
          fi

      - name: Build firmware
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          export VERBOSE=1

          cd $WORKSPACE

          # Build with auto-detected SDK paths
          west build -b clicker4_stm32f7 Projects/svea-lli \
            --build-dir build/clicker4_stm32f7 \
            --pristine \
            -- -DBOARD_ROOT="$WORKSPACE" \
               -DCONFIG_SPEED_OPTIMIZATIONS=y \
               ${ZEPHYR_SDK_CMAKE_DIR:+-DZephyr-sdk_DIR=$ZEPHYR_SDK_CMAKE_DIR}

      - name: Extract build information
        id: build_info
        run: |
          cd $WORKSPACE
          BUILD_DIR="build/clicker4_stm32f7"

          # Extract memory usage from build log
          if [ -f "$BUILD_DIR/zephyr/zephyr.map" ]; then
            FLASH_USED=$(grep -E "^LOAD|^\.text|^\.rodata" "$BUILD_DIR/zephyr/zephyr.map" | awk '{sum += $3} END {printf "%.1f KB", sum/1024}' || echo "Unknown")
            RAM_USED=$(grep -E "^\.data|^\.bss" "$BUILD_DIR/zephyr/zephyr.map" | awk '{sum += $3} END {printf "%.1f KB", sum/1024}' || echo "Unknown")
          else
            FLASH_USED="Unknown"
            RAM_USED="Unknown"
          fi

          echo "flash_used=$FLASH_USED" >> $GITHUB_OUTPUT
          echo "ram_used=$RAM_USED" >> $GITHUB_OUTPUT

          # Get Zephyr version
          ZEPHYR_VERSION=$(west --version 2>/dev/null | head -1 || echo "Unknown")
          echo "zephyr_version=$ZEPHYR_VERSION" >> $GITHUB_OUTPUT

      - name: Collect build artifacts
        run: |
          cd $WORKSPACE
          mkdir -p artifacts

          echo "=== Trying explicit path first ==="
          EXPLICIT_PATH="$WORKSPACE/build/clicker4_stm32f7/zephyr"
          echo "Looking in: $EXPLICIT_PATH"
          ls -la "$EXPLICIT_PATH/" || echo "Explicit path not found"

          # Try explicit path first
          if [ -f "$EXPLICIT_PATH/zephyr.hex" ]; then
            echo "Found zephyr.hex at explicit path"
            cp "$EXPLICIT_PATH/zephyr.hex" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.elf" ]; then
            echo "Found zephyr.elf at explicit path"
            cp "$EXPLICIT_PATH/zephyr.elf" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.bin" ]; then
            echo "Found zephyr.bin at explicit path"
            cp "$EXPLICIT_PATH/zephyr.bin" artifacts/
          fi

          # If explicit path didn't work, search as fallback
          if [ -z "$(ls -A artifacts/)" ]; then
            echo "=== Explicit path failed, searching as fallback ==="
            find $WORKSPACE -name "zephyr.hex" -exec cp {} artifacts/ \; -print || echo "No .hex files found"
            find $WORKSPACE -name "zephyr.elf" -exec cp {} artifacts/ \; -print || echo "No .elf files found"
            find $WORKSPACE -name "zephyr.bin" -exec cp {} artifacts/ \; -print || echo "No .bin files found"
          fi

          echo "=== Final artifacts ==="
          ls -la artifacts

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: svea-lli-firmware
          path: artifacts/

  auto-prerelease:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for release notes

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: svea-lli-firmware
          path: release-artifacts

      - name: Get next version
        id: version
        run: |
          # Get the latest release tag (excluding prereleases)
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | grep -v "beta\|alpha\|rc" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, start with v1.0.0
            echo "No existing release tags found, starting with v1.0.0"
            BASE_VERSION="v1.0.0"
          else
            echo "Latest release tag: $LATEST_TAG"
            BASE_VERSION="$LATEST_TAG"
          fi

          # Extract version numbers (remove 'v' prefix)
          VERSION=${BASE_VERSION#v}

          # Split into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment patch version for prerelease
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
          BETA_VERSION="${NEXT_VERSION}-beta"

          echo "Base version: $BASE_VERSION"
          echo "Next version: $NEXT_VERSION"
          echo "Beta version: $BETA_VERSION"

          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "beta_version=$BETA_VERSION" >> $GITHUB_OUTPUT

      - name: Generate GitHub auto-release notes
        id: github_notes
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('Generating GitHub auto-release notes...');
              
              // Use GitHub's built-in release notes generation
              const { data } = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: '${{ steps.version.outputs.beta_version }}',
                previous_tag_name: '${{ steps.version.outputs.base_version }}'
              });
              
              console.log('GitHub auto-release notes generated successfully');
              return data.body;
              
            } catch (error) {
              console.log('GitHub auto-release notes failed:', error.message);
              return null;
            }

      - name: Create enhanced release notes
        id: enhanced_notes
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)

          # Create enhanced release notes file
          cat << 'EOF' > enhanced_notes.md
          🚀 **SVEA Low-Level Interface Firmware - Beta Release**

          **Version:** ${{ steps.version.outputs.beta_version }}  
          **Base Version:** ${{ steps.version.outputs.base_version }}  
          **Target Board:** Clicker 4 STM32F7  
          **Build:** #${{ github.run_number }}  
          **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          ---

          EOF

          # Add GitHub auto-generated notes if available
          if [ "${{ steps.github_notes.outputs.result }}" != "null" ] && [ -n "${{ steps.github_notes.outputs.result }}" ]; then
            echo "## 📋 What's Changed" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            echo '${{ steps.github_notes.outputs.result }}' >> enhanced_notes.md
            echo "" >> enhanced_notes.md
          else
            echo "## 📋 What's Changed" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            
            # Get number of commits
            COMMIT_COUNT=$(git rev-list --count ${{ steps.version.outputs.base_version }}..HEAD 2>/dev/null || echo "1")
            
            # Get latest commit info
            LATEST_COMMIT=$(git log -1 --pretty=format:"%s" HEAD)
            
            echo "This beta release includes **${COMMIT_COUNT} commits** with improvements to the SVEA low-level interface firmware." >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            echo "**Latest change:** ${LATEST_COMMIT}" >> enhanced_notes.md
            echo "" >> enhanced_notes.md
            
            # Add recent commits (last 5)
            echo "### Recent Changes:" >> enhanced_notes.md
            git log ${{ steps.version.outputs.base_version }}..HEAD --oneline --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" -n 5 >> enhanced_notes.md 2>/dev/null || echo "- Latest commit: ${LATEST_COMMIT} ([${SHORT_SHA}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}))" >> enhanced_notes.md
          fi

          # Add firmware and technical info
          cat << 'EOF' >> enhanced_notes.md

          ---

          ## 📦 Firmware Files

          | File | Description | Use Case |
          |------|-------------|----------|
          | **`zephyr.hex`** | Intel HEX format | Programming with most flash tools |
          | **`zephyr.elf`** | ELF with debug symbols | Debugging and analysis |
          | **`zephyr.bin`** | Raw binary | Direct flash programming |

          ## 💾 Memory Usage

          - **Flash Usage:** ${{ needs.build.outputs.flash_used || 'See build logs' }}
          - **RAM Usage:** ${{ needs.build.outputs.ram_used || 'See build logs' }}
          - **Zephyr Version:** ${{ needs.build.outputs.zephyr_version || 'Latest' }}

          ## 🔧 Recommended Programming Method

          **CodeGrip** is the recommended method for flashing this firmware

          ## ⚠️ Beta Release Notice

          This is an **automated pre-release** for testing and development.

          - ✅ **Suitable for:** Development, testing, evaluation
          - ⚠️ **Use with caution in:** Production environments
          - 🔍 **Testing recommended:** Verify functionality before deployment

          ## 🤖 Build Information

          - **Triggered by:** @${{ github.actor }}
          - **Build Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **GitHub Actions:** [View build logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Commit:** [${SHORT_SHA}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          ## 🔗 Related Links

          - [SVEA Platform Documentation](https://github.com/KTH-SML/svea)
          - [Zephyr RTOS Documentation](https://docs.zephyrproject.org/)
          - [STM32F7 Reference Manual](https://www.st.com/resource/en/reference_manual/rm0385-stm32f75xxx-and-stm32f74xxx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf)

          EOF

          echo "notes_file=enhanced_notes.md" >> $GITHUB_OUTPUT

      - name: Create auto-prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.beta_version }}
          name: "${{ steps.version.outputs.next_version }} Beta - SVEA LLI Firmware"
          prerelease: true
          body_path: enhanced_notes.md
          files: |
            release-artifacts/zephyr.hex
            release-artifacts/zephyr.elf
            release-artifacts/zephyr.bin

  release:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: svea-lli-firmware
          path: release-artifacts

      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/zephyr.hex
            release-artifacts/zephyr.elf
            release-artifacts/zephyr.bin
