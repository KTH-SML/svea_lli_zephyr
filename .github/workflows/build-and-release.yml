name: Build and Publish Firmware

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zephyrproject-rtos/ci:v0.26.2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set workspace variable
        run: |
          echo "WORKSPACE=${GITHUB_WORKSPACE:-/workspace}" >> $GITHUB_ENV

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "WORKSPACE: $WORKSPACE"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "PWD: $(pwd)"
          echo "=== Zephyr SDK Search ==="
          find /opt -name "*zephyr*" -type d 2>/dev/null || echo "No zephyr directories in /opt"
          ls -la /opt/toolchains/ 2>/dev/null || echo "No /opt/toolchains directory"
          echo "=== Environment Variables ==="
          env | grep -i zephyr || echo "No ZEPHYR env vars"
          echo "=== Which west ==="
          which west || echo "west not found"
          west --version || echo "west version failed"

      - name: Initialize west workspace
        run: |
          if [ ! -d .west ]; then
            west init -l west-manifest
          fi
          west update

      - name: Install micro-ROS dependencies
        run: |
          pip3 install --break-system-packages \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2 || \
          pip3 install --user \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2

      - name: Clean build directory
        run: |
          rm -rf $WORKSPACE/Projects/svea-lli/build
          rm -rf $WORKSPACE/modules/lib/micro_ros_zephyr_module/modules/libmicroros/micro_ros_*
          rm -rf $WORKSPACE/build

      - name: Setup Zephyr SDK
        run: |
          # Auto-detect SDK installation
          SDK_ROOT=$(find /opt -name "zephyr-sdk-*" -type d 2>/dev/null | head -1)
          if [ -z "$SDK_ROOT" ]; then
            echo "ERROR: No Zephyr SDK found in /opt"
            exit 1
          fi

          echo "Found Zephyr SDK at: $SDK_ROOT"
          echo "ZEPHYR_SDK_INSTALL_DIR=$SDK_ROOT" >> $GITHUB_ENV

          # Check for CMake config
          CMAKE_CONFIG="$SDK_ROOT/cmake/zephyr"
          if [ -d "$CMAKE_CONFIG" ]; then
            echo "ZEPHYR_SDK_CMAKE_DIR=$CMAKE_CONFIG" >> $GITHUB_ENV
            echo "Found CMake config at: $CMAKE_CONFIG"
          else
            echo "WARNING: No CMake config found at $CMAKE_CONFIG"
          fi

      - name: Build firmware
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          export VERBOSE=1

          cd $WORKSPACE

          # Build with auto-detected SDK paths
          west build -b clicker4_stm32f7 Projects/svea-lli \
            --build-dir build/clicker4_stm32f7 \
            --pristine \
            -- -DBOARD_ROOT="$WORKSPACE" \
               -DCONFIG_SPEED_OPTIMIZATIONS=y \
               ${ZEPHYR_SDK_CMAKE_DIR:+-DZephyr-sdk_DIR=$ZEPHYR_SDK_CMAKE_DIR}

      - name: Collect build artifacts
        run: |
          cd $WORKSPACE
          mkdir -p artifacts

          echo "=== Trying explicit path first ==="
          EXPLICIT_PATH="$WORKSPACE/build/clicker4_stm32f7/zephyr"
          echo "Looking in: $EXPLICIT_PATH"
          ls -la "$EXPLICIT_PATH/" || echo "Explicit path not found"

          # Try explicit path first
          if [ -f "$EXPLICIT_PATH/zephyr.hex" ]; then
            echo "Found zephyr.hex at explicit path"
            cp "$EXPLICIT_PATH/zephyr.hex" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.elf" ]; then
            echo "Found zephyr.elf at explicit path"
            cp "$EXPLICIT_PATH/zephyr.elf" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.bin" ]; then
            echo "Found zephyr.bin at explicit path"
            cp "$EXPLICIT_PATH/zephyr.bin" artifacts/
          fi

          # If explicit path didn't work, search as fallback
          if [ -z "$(ls -A artifacts/)" ]; then
            echo "=== Explicit path failed, searching as fallback ==="
            find $WORKSPACE -name "zephyr.hex" -exec cp {} artifacts/ \; -print || echo "No .hex files found"
            find $WORKSPACE -name "zephyr.elf" -exec cp {} artifacts/ \; -print || echo "No .elf files found"
            find $WORKSPACE -name "zephyr.bin" -exec cp {} artifacts/ \; -print || echo "No .bin files found"
          fi

          echo "=== Final artifacts ==="
          ls -la artifacts

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: svea-lli-firmware
          path: artifacts/

  auto-prerelease:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for release notes

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: svea-lli-firmware
          path: release-artifacts

      - name: Get next version
        id: version
        run: |
          # Get the latest release tag (excluding prereleases)
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | grep -v "beta\|alpha\|rc" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, start with v1.0.0
            echo "No existing release tags found, starting with v1.0.0"
            BASE_VERSION="v1.0.0"
          else
            echo "Latest release tag: $LATEST_TAG"
            BASE_VERSION="$LATEST_TAG"
          fi

          # Extract version numbers (remove 'v' prefix)
          VERSION=${BASE_VERSION#v}

          # Split into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment patch version for prerelease
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
          BETA_VERSION="${NEXT_VERSION}-beta"

          echo "Base version: $BASE_VERSION"
          echo "Next version: $NEXT_VERSION"
          echo "Beta version: $BETA_VERSION"

          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "beta_version=$BETA_VERSION" >> $GITHUB_OUTPUT

      - name: Generate smart release notes
        id: release_notes
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get commits since last release
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: '${{ steps.version.outputs.base_version }}',
                head: context.sha
              });

              // Extract commit messages and analyze
              const commits = comparison.commits.map(commit => ({
                sha: commit.sha.substring(0, 7),
                message: commit.commit.message.split('\n')[0],
                author: commit.commit.author.name,
                url: commit.html_url
              }));

              // Categorize commits
              const features = commits.filter(c => 
                /feat|add|implement|new/i.test(c.message)
              );
              
              const fixes = commits.filter(c => 
                /fix|bug|resolve|patch/i.test(c.message)
              );
              
              const improvements = commits.filter(c => 
                /improve|update|enhance|optimize|refactor/i.test(c.message)
              );

              const docs = commits.filter(c => 
                /doc|readme|comment/i.test(c.message)
              );

              const other = commits.filter(c => 
                !features.includes(c) && !fixes.includes(c) && 
                !improvements.includes(c) && !docs.includes(c)
              );

              // Generate release notes
              let releaseNotes = `🚀 **Automated Beta Release**\n\n`;
              releaseNotes += `**Version:** ${{ steps.version.outputs.beta_version }}\n`;
              releaseNotes += `**Base Version:** ${{ steps.version.outputs.base_version }}\n`;
              releaseNotes += `**Commits:** ${commits.length} changes since last release\n\n`;

              if (features.length > 0) {
                releaseNotes += `## ✨ New Features\n`;
                features.forEach(c => {
                  releaseNotes += `- ${c.message} ([${c.sha}](${c.url}))\n`;
                });
                releaseNotes += `\n`;
              }

              if (fixes.length > 0) {
                releaseNotes += `## 🐛 Bug Fixes\n`;
                fixes.forEach(c => {
                  releaseNotes += `- ${c.message} ([${c.sha}](${c.url}))\n`;
                });
                releaseNotes += `\n`;
              }

              if (improvements.length > 0) {
                releaseNotes += `## 🔧 Improvements\n`;
                improvements.forEach(c => {
                  releaseNotes += `- ${c.message} ([${c.sha}](${c.url}))\n`;
                });
                releaseNotes += `\n`;
              }

              if (docs.length > 0) {
                releaseNotes += `## 📚 Documentation\n`;
                docs.forEach(c => {
                  releaseNotes += `- ${c.message} ([${c.sha}](${c.url}))\n`;
                });
                releaseNotes += `\n`;
              }

              if (other.length > 0) {
                releaseNotes += `## 🔄 Other Changes\n`;
                other.forEach(c => {
                  releaseNotes += `- ${c.message} ([${c.sha}](${c.url}))\n`;
                });
                releaseNotes += `\n`;
              }

              releaseNotes += `## 📦 Firmware Files\n`;
              releaseNotes += `- \`zephyr.hex\` - Flash file for programming\n`;
              releaseNotes += `- \`zephyr.elf\` - Debug symbols and binary\n`;
              releaseNotes += `- \`zephyr.bin\` - Raw binary file\n\n`;

              releaseNotes += `## ⚠️ Beta Notice\n`;
              releaseNotes += `This is an automated pre-release for testing. Use with caution in production.\n\n`;

              releaseNotes += `**Build Info:**\n`;
              releaseNotes += `- Build #${{ github.run_number }}\n`;
              releaseNotes += `- Commit: ${context.sha.substring(0, 7)}\n`;
              releaseNotes += `- Triggered by: @${{ github.actor }}\n`;

              return releaseNotes;
            } catch (error) {
              console.log('Smart release notes failed:', error.message);
              return null;
            }

      - name: Generate fallback release notes
        id: fallback_notes
        if: steps.release_notes.outcome == 'failure' || steps.release_notes.outputs.result == 'null'
        run: |
          # Get short commit SHA
          SHORT_SHA=$(git rev-parse --short HEAD)

          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')

          # Get recent commits (last 10)
          RECENT_COMMITS=$(git log --oneline -10 --pretty=format:'- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))')

          # Generate fallback release notes
          cat << EOF > fallback_notes.md
          🚀 **Automated Beta Release**

          **Version:** ${{ steps.version.outputs.beta_version }}
          **Base Version:** ${{ steps.version.outputs.base_version }}

          ## 📝 Latest Changes
          **Latest Commit:** ${COMMIT_MSG} ([${SHORT_SHA}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}))

          ## 🔄 Recent Commits
          ${RECENT_COMMITS}

          ## 📦 Firmware Files
          - \`zephyr.hex\` - Flash file for programming
          - \`zephyr.elf\` - Debug symbols and binary  
          - \`zephyr.bin\` - Raw binary file

          ## ⚠️ Beta Notice
          This is an automated pre-release for testing. Use with caution in production.

          **Build Info:**
          - Build #${{ github.run_number }}
          - Commit: ${SHORT_SHA}
          - Triggered by: @${{ github.actor }}
          EOF

          # Set output for next step
          echo "notes_file=fallback_notes.md" >> $GITHUB_OUTPUT

      - name: Create auto-prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.beta_version }}
          name: "${{ steps.version.outputs.next_version }} Beta"
          prerelease: true
          body: ${{ steps.release_notes.outputs.result || '' }}
          body_path: ${{ steps.fallback_notes.outputs.notes_file || '' }}
          files: |
            release-artifacts/zephyr.hex
            release-artifacts/zephyr.elf
            release-artifacts/zephyr.bin

  release:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: svea-lli-firmware
          path: release-artifacts

      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            release-artifacts/zephyr.hex
            release-artifacts/zephyr.elf
            release-artifacts/zephyr.bin
