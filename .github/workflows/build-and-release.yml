name: Build and Publish Firmware

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zephyrproject-rtos/ci:v0.26.2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set workspace variable
        run: |
          echo "WORKSPACE=${GITHUB_WORKSPACE:-/workspace}" >> $GITHUB_ENV

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "WORKSPACE: $WORKSPACE"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "PWD: $(pwd)"
          echo "=== Zephyr SDK Search ==="
          find /opt -name "*zephyr*" -type d 2>/dev/null || echo "No zephyr directories in /opt"
          ls -la /opt/toolchains/ 2>/dev/null || echo "No /opt/toolchains directory"
          echo "=== Environment Variables ==="
          env | grep -i zephyr || echo "No ZEPHYR env vars"
          echo "=== Which west ==="
          which west || echo "west not found"
          west --version || echo "west version failed"

      - name: Initialize west workspace
        run: |
          if [ ! -d .west ]; then
            west init -l west-manifest
          fi
          west update

      - name: Install micro-ROS dependencies
        run: |
          pip3 install --break-system-packages \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2 || \
          pip3 install --user \
            catkin-pkg==1.0.0 \
            colcon-argcomplete==0.3.3 \
            colcon-bash==0.5.0 \
            colcon-cd==0.1.1 \
            colcon-cmake==0.2.29 \
            colcon-common-extensions==0.3.0 \
            colcon-core==0.19.0 \
            colcon-defaults==0.2.9 \
            colcon-devtools==0.3.0 \
            colcon-library-path==0.2.1 \
            colcon-metadata==0.2.5 \
            colcon-notification==0.3.0 \
            colcon-output==0.2.13 \
            colcon-package-information==0.4.0 \
            colcon-package-selection==0.2.10 \
            colcon-parallel-executor==0.3.0 \
            colcon-pkg-config==0.1.0 \
            colcon-powershell==0.4.0 \
            colcon-python-setup-py==0.2.9 \
            colcon-recursive-crawl==0.2.3 \
            colcon-ros==0.5.0 \
            colcon-test-result==0.3.8 \
            colcon-zsh==0.5.0 \
            empy==4.2 \
            lark==1.2.2

      - name: Clean build directory
        run: |
          rm -rf $WORKSPACE/Projects/svea-lli/build
          rm -rf $WORKSPACE/modules/lib/micro_ros_zephyr_module/modules/libmicroros/micro_ros_*
          rm -rf $WORKSPACE/build

      - name: Setup Zephyr SDK
        run: |
          # Auto-detect SDK installation
          SDK_ROOT=$(find /opt -name "zephyr-sdk-*" -type d 2>/dev/null | head -1)
          if [ -z "$SDK_ROOT" ]; then
            echo "ERROR: No Zephyr SDK found in /opt"
            exit 1
          fi

          echo "Found Zephyr SDK at: $SDK_ROOT"
          echo "ZEPHYR_SDK_INSTALL_DIR=$SDK_ROOT" >> $GITHUB_ENV

          # Check for CMake config
          CMAKE_CONFIG="$SDK_ROOT/cmake/zephyr"
          if [ -d "$CMAKE_CONFIG" ]; then
            echo "ZEPHYR_SDK_CMAKE_DIR=$CMAKE_CONFIG" >> $GITHUB_ENV
            echo "Found CMake config at: $CMAKE_CONFIG"
          else
            echo "WARNING: No CMake config found at $CMAKE_CONFIG"
          fi

      - name: Build firmware
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          export VERBOSE=1

          cd $WORKSPACE

          # Build with auto-detected SDK paths
          west build -b clicker4_stm32f7 Projects/svea-lli \
            --build-dir build/clicker4_stm32f7 \
            --pristine \
            -- -DBOARD_ROOT="$WORKSPACE" \
               -DCONFIG_SPEED_OPTIMIZATIONS=y \
               ${ZEPHYR_SDK_CMAKE_DIR:+-DZephyr-sdk_DIR=$ZEPHYR_SDK_CMAKE_DIR}

      - name: Collect build artifacts
        run: |
          cd $WORKSPACE
          mkdir -p artifacts

          echo "=== Trying explicit path first ==="
          EXPLICIT_PATH="$WORKSPACE/build/clicker4_stm32f7/zephyr"
          echo "Looking in: $EXPLICIT_PATH"
          ls -la "$EXPLICIT_PATH/" || echo "Explicit path not found"

          # Try explicit path first
          if [ -f "$EXPLICIT_PATH/zephyr.hex" ]; then
            echo "Found zephyr.hex at explicit path"
            cp "$EXPLICIT_PATH/zephyr.hex" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.elf" ]; then
            echo "Found zephyr.elf at explicit path"
            cp "$EXPLICIT_PATH/zephyr.elf" artifacts/
          fi

          if [ -f "$EXPLICIT_PATH/zephyr.bin" ]; then
            echo "Found zephyr.bin at explicit path"
            cp "$EXPLICIT_PATH/zephyr.bin" artifacts/
          fi

          # If explicit path didn't work, search as fallback
          if [ -z "$(ls -A artifacts/)" ]; then
            echo "=== Explicit path failed, searching as fallback ==="
            find $WORKSPACE -name "zephyr.hex" -exec cp {} artifacts/ \; -print || echo "No .hex files found"
            find $WORKSPACE -name "zephyr.elf" -exec cp {} artifacts/ \; -print || echo "No .elf files found"
            find $WORKSPACE -name "zephyr.bin" -exec cp {} artifacts/ \; -print || echo "No .bin files found"
          fi

          echo "=== Final artifacts ==="
          ls -la artifacts

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: svea-lli-firmware
          path: artifacts/

  release:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: svea-lli-firmware
          path: release-artifacts

      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            release-artifacts/zephyr.hex
            release-artifacts/zephyr.elf
